\input texinfo   @c -*-texinfo-*-
@comment %**start of header
@setfilename bigmc.info
@include version.texi
@settitle BigMC @value{VERSION}
@syncodeindex pg cp
@comment %**end of header

@copying
This manual is for BigMC (version @value{VERSION}, @value{UPDATED}).

Copyright @copyright{} 2011 Gian Perrone

@quotation
Permission is granted to make and distribute verbatim copies
of this entire document without royalty provided the
copyright notice and this permission notice are preserved.
@end quotation

This work funded in part by the Danish Research Agency (grant no.: 2106-080046)
and the IT University of Copenhagen (the Jingling Genies project)
@end copying

@dircategory BigMC Bigraphical Model Checker
@direntry
* bigmc: (bigmc)  Invoking bigmc.
@end direntry

@titlepage
@title BigMC
@subtitle for version @value{VERSION}
@vskip 0pt plus 1filll
@center @image{ccslts,8cm}
@vskip 0pt plus 1filll
@author Gian Perrone (@email{gdpe at itu.dk})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top BigMC

This manual is for BigMC (version @value{VERSION}, @value{UPDATED}).

@end ifnottex

@ifhtml
@menu
* Introduction::       What is BigMC and why do you need it?
* Obtaining BigMC::    How do you obtain and install BigMC?
* Invoking bigmc::     Quick-start guide to using the tool
* BGM file structure:: How to construct model files
* Term language::      How to describe bigraphical reactive systems
* Property language::  How to describe specifications
* Checking::           How to check properties
* Example::            An example model of a simple airport
* Table of Contents::  All contents of this manual
@end menu
@end ifhtml

@ifnothtml
@menu
* Introduction::       What is BigMC and why do you need it?
* Obtaining BigMC::    How do you obtain and install BigMC?
* Invoking bigmc::     Quick-start guide to using the tool
* BGM file structure:: How to construct model files
* Term language::      How to describe bigraphical reactive systems
* Property language::  How to describe specifications
* Checking::           How to check properties
* Example::            An example model of a simple airport
@end menu
@end ifnothtml

@node Introduction
@chapter Introduction 

@pindex bigmc
@cindex invoking @command{bigmc}

@acronym{BigMC} (@strong{Big}raphical @strong{M}odel @strong{C}hecker) is a model-checker 
designed to
operate on @emph{Bigraphical Reactive Systems} --- @acronym{BRS}.  BRS is a formalism developed
by Robin Milner and colleagues that emphasises the orthogonal notions of @emph{locality} and
@emph{connectivity}.  Bigraphs have found applications in ubiquitous computing, computational
biology, business workflow modelling, and context-aware systems.

By @emph{model checking}, we mean precisely the act of checking whether some specification is
true of a particular bigraphical model.  This is achieved through a kind of exhaustive search
of all the possible states of the system.  For arbitrary models, this kind of checking is
computationally intractible --- the state space is simply too huge (and indeed infinite in
many cases).  The challenge of this kind of task is to limit the kinds of models we check
to some tractible subset, and to reduce the number of actual states that we need to check 
directly in order to provide concrete correctness guarantees.

@section A cautionary note

@acronym{BigMC} is experimental software, still under active development.  It might never be
finished.  It would be foolish to depend upon the kinds of guarantees that it can provide
without considering exactly @strong{why} these might be true.

@section About BigMC

@acronym{BigMC} is being developed at the @uref{http://itu.dk, IT University of Copenhagen}
by @uref{http://itu.dk/~gdpe/, Gian Perrone} in collaboration with
@uref{http://itu.dk/~hilde, Thomas Hildebrandt} and @uref{http://itu.dk/~debois, S@o{}ren Debois}.

@node Obtaining BigMC
@chapter Obtaining BigMC

The latest version of BigMC will always be available from the 
@uref{http://bigraph.org/bigmc/, primary project website}:

@itemize
@item Download BigMC-@value{VERSION} (tar.gz, latest as of @value{UPDATED}):

@url{http://bigraph.org/bigmc/release/bigmc-@value{VERSION}.tar.gz}
@end itemize

The latest version of this manual is available in PDF format from 

@url{http://bigraph.org/bigmc/bigmc.pdf}

or in HTML format from:

@url{http://bigraph.org/bigmc/manual}.

@section Installation

@acronym{BigMC} uses a standard GNU Autoconf/Automake setup.  You will need a 
Unix-like environment --- the current release is known to work on MacOS X 10.6, MacOS X 10.7
 and recent version of Debian and Ubuntu.

If you're lucky, the following procedure will install everything to
@code{/usr/local/bigmc/}:

@example
tar -xzf bigmc-@value{VERSION}.tar.gz
cd bigmc-@value{VERSION}/
./configure
make
sudo make install
@end example

The build process relies on the presence of the following:

@itemize
@item A C++ compiler (tested with The GNU C++ compiler @code{g++}, version 4.0 or greater)
@item GNU Make
@item GNU Readline
@end itemize

Highly recommended:

@itemize
@item @uref{http://code.google.com/p/google-perftools/, Google-Perftools}
@end itemize

Finally, it is recommended that you add something like the following to your @file{.profile}:

@example
export PATH=/usr/local/bigmc/bin:$PATH
export BIGMC_HOME=/usr/local/bigmc
@end example

All going well, you should be able to just invoke @acronym{BigMC} using the command:

@example
$ bigmc
@end example

@section Configuration

The configuration file @file{/usr/local/bigmc/conf/bigmc.conf} contains predicate definitions
that point to the dynamically loadable modules that implement them.  If you wish to
add new predicates, you will need to add them to this configuration file.

@node Invoking bigmc
@chapter Invoking bigmc

Running @code{bigmc} alone will enter the interactive environment:


@example
$ bigmc
BigMC version 0.1-dev (http://www.itu.dk/~gdpe/bigmc)
Copyright (c) 2011 Gian Perrone <gdpe at itu.dk>
bigmc> 
@end example

The @code{bigmc>} prompt indicates that the interactive environment is ready to accept
model definitions, properties and finally the @code{check} command.

To exit the interactive environment, enter @code{quit} or @kbd{C-d}. It is often more useful to invoke @code{bigmc} with a model file.  The full command line options are:

@example
bigmc [-hlpvV] [-G @var{file}] [-m @var{steps}] [-r @var{steps}] [-t @var{threads}] [@var{file}]
@end example

@section Command Line Options

Several options are available to control the runtime behaviour of the checking process:

@table @code
@item @code{-h}     
display usage information and exit.

@item @code{-l}
employ only local checking. This avoids building  the  transition  system
and  saves  memory  when checking large models, but limits the properties
that you can check to those relating only to a single agent.

@item @code{-v}     
print version information and exit.

@item @code{-V -VV} 
increase the verbosity of the information that is  output  during  execution.

@item @code{-G} @var{file}
if set, output a graphviz file suitable for rendering with dot to @var{file}.

@item @code{-m} @var{steps}
set the maximum number of steps of reaction that may be performed.

@item @code{-p}
print new states as they are discovered.

@item @code{-r} @var{steps}
set  the  frequency  with which statistics about the graph and work queue
              are output while running.

@item @code{-t} @var{threads}
instruct the checker to run @var{threads} parallel threads. Defaults to 2.

@end table



@node BGM file structure
@chapter BGM file structure

The basic structure for a bigraph model file is as follows:

@example
# Comments
<control definitions>

<names>

<reaction rules>

<model definition>

<properties>

%check;
@end example

@section Comments

Comments are lines starting with '#', and continue to the end of the line.

@example
# This is a comment
@end example

@section Control Definitions

Control definitions take one of two forms:

@example
%active @var{control-name} : @var{arity};
%passive @var{control-name} : @var{arity};
@end example

All of the information must be present.  For example:

@example
%passive send : 1;
%active foo : 3;
@end example

@section Names

The top-level outer names are defined as follows:

@example
%name @var{name};
@end example

For example:

@example
%name a;
%name b;
@end example

The alternative keyword @var{%outer} is also accepted to make explicit the fact
 that these are specifically @emph{outer} names.

Names need not be unique with respect to control names; however, it might be best to keep them
that way to avoid confusion.

@node Term language
@chapter Term language

The term language is relatively simple. It uses the control names and inner and outer names
as defined in the preamble.  The full grammar is given by:

@example
@var{T} ::= @var{K}.@var{T}
@var{T} ::= @var{T} | @var{T}
@var{T} ::= @var{T} || @var{T}
@var{T} ::= $@var{n}
@var{T} ::= @var{K}
@var{T} ::= @var{nil}

@var{K} ::= @var{k}[@var{names}]
@var{K} ::= @var{k}

@var{names} ::= @var{n} , @var{names}
@var{names} ::= @var{n}

@var{n} ::= [a-zA-Z][a-zA-Z0-9]*
@var{n} ::= -
@end example

Where @var{k} is drawn from the set of controls.  Using @code{-} as a link name 
(e.g. @code{foo[-,x].P} leaves the first port of the @var{foo} node unlinked,
and links the second port to @var{x}.  Ports are linked in-order, so all ports must be
present at every prefix, whether they are linked or not.

@section Reaction Rules

All terms of the form @code{@var{T} -> @var{T};} are considered to be reaction rules for the
model under construction.  Order is not significant.  For example:

@example
send[x].$0 | recv[x].$1 -> $0 | $1;
@end example

Reaction rules may optionally be given names using the syntax:

@example
%rule @var{rule-name} @var{redex} -> @var{reactum};
@end example

These names are for display purposes only, and have no semantic signficance.

Names that do not appear in @code{%name} definitions are considered free names
and will be bound during matching.  Names that are defined in the name set will be matched
literally, and will not be re-bound.

The double-parallel operator (@code{||}) introduces new top-level regions.  These can only appear at the top-level, and only in reaction rules.  The number of regions in the redex and reactum must agree, e.g.:

@example
a.$0 || b.$1 -> c.$0 || d.$0;
@end example

is a valid rule, however the following is not:

@example
a.$0 || b.$1 -> c.$0;
@end example

A word of warning:  The error detection for wide reaction rules is rather fragile in the current version.  You would be well advised to be careful when constructing complex wide rules.

@section Model Definition

There can be at most one model definition per model file --- this will always be the last line
in the file of the form @code{@var{T};}.  It may appear anywhere in the file before the @code{%check} line, and after any definitions upon which it depends.  Order with respect to reaction
rules is not significant.  Continuing from the previous sections, we could define a complete
model:

@example
%passive send : 1;
%passive recv : 1;
%name a;
%name b;

send[x].$0 | recv[x].$1 -> $0 | $1;

# The model definition
send[a].recv[b].send[a] | recv[a].send[b].recv[b];
@end example

We now have a complete model file suitable to use for checking.

@node Property language
@chapter Property language

Having defined a model in the previous section, we want to start to be able to make some
kind of specification of properties which we would like to ensure hold.  We do this using the
@code{%property} specifier, which is of the form:

@example
%property @var{property-name} @var{property-expression};
@end example

The @var{property-name} is a non-semantically-significant name which will be reported if the
checker encounters a violation of a property during checking.

A single @file{.bgm} file can have arbitrarily many @code{%property} declarations.  The order
in which they appear in the file will be the order in which they are considered at each new
state; it may be a sensible strategy to place matches more likely to fail earlier in the
file.

@section Property Expressions

The basic unit of most property expressions is the @dfn{predicate}.  An exhaustive list of
available predicates will be provided in a subsequent section of this manual.  Aside from
predicates, various familiar programming language logical connectives are provided:

@example
@var{P} ::= @var{B} && @var{B}
@var{P} ::= @var{B} || @var{B}
@var{P} ::= !@var{B}

@var{B} ::= @var{E} == @var{E}
@var{B} ::= @var{E} != @var{E}
@var{B} ::= @var{E} <= @var{E}
@var{B} ::= @var{E} >= @var{E}
@var{B} ::= @var{E} < @var{E} 
@var{B} ::= @var{E} > @var{E}

@var{E} ::= @var{predicate}(@var{parameters})
@var{E} ::= @var{integer literal}
@end example

The essential execution model associated with these properties is that each time a new state is
discovered and considered, the predicates are applied to @emph{that state}.  The simplest
property we could define might be:

@example
%property not_empty !empty();
@end example

Assuming we have some (pre-defined) predicate called @code{empty} that takes no arguments, then
this property will be satisfied iff every state in the model is not empty.

It turns out that this is sufficient to write specifications that inspect the properties of
individual states, but what if we want to write a specification that defines properties
over states as they evolve?  We have another mechanism for that:

@example
%property growth size() >= $pred->size();
@end example 

This property assumes that we have a pre-existing predicate called @code{size} that returns the
``size'' of a given term (spoiler alert: we do).  The first application of the predicate 
@code{size} will evaluate to the size of the current state under consideration.  The second
instance of the predicate is prefixed with @code{$pred} (short for @emph{predecessor}), which
is a placeholder for ``the state from which the current state was created by a step of
reaction'', so in this instance @code{size} is being applied to the predecessor state, not
the current state.  Finally, taking the greater-than-or-equal-to connective @code{>=}, this is a
property stating that this model must never shrink through a step of reaction.  If the checker
can find any two consecutive states in the transition system where a state is smaller than
the one from which it is derived, this will constitute a violation of the @file{growth}
property.

@section Pre-defined Scopes

The full list of scopes:

@itemize
@item @code{$pred}
The predecessor to the current state, such that there exists some step of reaction from
 @code{$pred} to the current state.
@item @code{$this}
The current state.
@item @code{$succ}
The set of successor states, i.e., those reachable by a step of reaction from the current state.
@item @code{$terminal}
The predicate in question is only applied to states marked @code{terminal}, that is, they
do not lead to any further states and there are no reactions that can be applied to them.
@code{$terminal->p()} will return @code{true} when applied to non-terminal states, or
@code{p()} if applied to a terminal state.
@item ... More to come?  Suggest more useful scopes!
@end itemize

It's important to note that scopes like @code{$succ} and @code{pred} will not work when in
local checking mode!

@section Pre-defined Predicates

@subsection @code{size()} Predicate

This predicate returns a count of the number of place-graph nodes in the current agent.  For example:

@example
a.a.a.nil --> 3
a.nil | b.nil --> 2
nil | nil | nil --> 0
nil --> 0
@end example

This can be used to construct properties such as:

@example
%property growth $pred->size() <= size();
@end example

@subsection @code{matches(@var{t})} Predicate

This checks whether a given redex @var{t} matches anywhere within the current agent, subject to the usual active contexts restriction.  For example:

@example
%active a : 0;
%active b : 0;
%active c : 0;

a.b | a.c;

a.$1 | $0 -> c.$1 | $0;

%property cc !matches(c.c);

%check
@end example

@subsection @code{empty() Predicate}

This is equivalent to the property @code{size() == 0}.

@subsection @code{terminal() Predicate}

This checks the property of the current node in the transition system and returns @code{false} if the node has outgoing edges (i.e. there are further agents reachable by the application of some reaction rule to this agent), or @code{true} otherwise.  See @file{doc/examples/dining.bgm} for an example use of this predicate to define deadlock-freedom.

@node Checking
@chapter Checking

Having defined your reaction rules, model and properties, the final
line in your file should be @code{%check}.  This signals to @code{bigmc} that checking should
actually begin.  

For example, we could check some @file{diverge_prop.bgm} (which is in the @file{doc/example}
directory of your @acronym{BigMC} distribution):

@example
%active a : 0;
%active b : 0;
%active c : 0;

a.b;

b -> a.b;
a.a.b -> a;
a.$0 -> c.$0;

%property growth size() >= $pred->size();

%check;
@end example

We invoke @code{bigmc} using a command such as:

@example
$ bigmc diverge_prop.bgm
@end example

This will result in the following backtrace:

@example
*** Found violation of property: growth
*** growth: size >= $pred->size()
#0  a.nil   <- *** VIOLATION ***
 >> a.a.b.nil -> a.nil

#1  a.a.b.nil
 >> b.nil -> a.b.nil

#2  a.b.nil
 >> (root)
mc::step(): Counter-example found.
@end example

We interpret the backtrace as showing us a state that violated the property @code{growth}.
States are displayed from ``newest'' to ``oldest'', interleaved with the reaction rule
that was applied to reach that state from the previous one.

@node Example
@chapter Example 

This example can be found in @file{doc/examples/airport2.bgm} in the BigMC distribution.

@example
#######################################################################
# Airport Example #2
# Gian Perrone, August 2011
#
# This is a very crude model of an airport with two passengers.
# Passengers travel to their flights through a series of steps,
# and enter a gate based upon their associated record in the
# passenger database.
######################## Definitions Section ##########################
# We distinguish landside and airside

%active Landside : 0;
%active Airside : 0;
%active Gates : 0;

# We distinguish zone types
# The two links are [identifier, exit]

%active Zone : 2;

# A gate is simply linked to a flight
%active Gate : 1;

# A passenger is linked to a flight
%passive Pax : 1;

# The database store
%active DB : 0;
%active PaxRecord : 2; # Links [passenger,gate]

# Names that represent zones
%name CheckIn;
%name Security;
%name DutyFree;
%name GateLounge;

# A gate status at the departure lounge
%name Boarding;

# Some flights
%name SK100;
%name SK101;
%name SK102;

# Two example passengers
%name Bob;
%name Joe;

######################### Reaction Rules ##############################

# Rule that allow passengers to move through the airport
Zone[w,x].(Pax[y] | $0) || Zone[x,z].$1 -> 
	Zone[w,x].$0 || Zone[x,z].(Pax[y] | $1);


# A passenger linked to a PaxRecord can proceed to the gate
Zone[m,Boarding].(Pax[y] | $0) || Gate[x].$1 || PaxRecord[y,x] | $2 ->
	Zone[m,Boarding].$0 || Gate[x].(Pax[y] | $1) || PaxRecord[y,x] | $2;

# A passenger magically disappears once they board the aircraft
Gate[x].(Pax[y] | $0) -> Gate[x].$0;

######################## Airport Model  ###############################

Landside.(
	Zone[-,CheckIn].(Pax[Bob] | Pax[Joe]) | 
	Zone[CheckIn,Security]
) | 
Airside.(
	Zone[Security,DutyFree] | 
	Zone[DutyFree,GateLounge] |
	Zone[GateLounge,Boarding]
) |
Gates.(
	Gate[SK100] | 
	Gate[SK102] |
	Gate[SK101]
) | DB.(
	PaxRecord[Joe,SK100] |
	PaxRecord[Bob,SK101]
);

%check
@end example

@ifhtml
@node Table of Contents
@unnumbered 

@contents
@end ifhtml
@bye


